/*
@ledge/external-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgeapi

import (
	"encoding/json"
	"fmt"
)

// ActivityType Enums
type ActivityType string

// List of ActivityType
const (
	USER_SIGN_UP ActivityType = "USER_SIGN_UP"
	REFERRAL ActivityType = "REFERRAL"
	GAME_CLICK ActivityType = "GAME_CLICK"
	SOCIAL_CLICK ActivityType = "SOCIAL_CLICK"
	EXTERNAL ActivityType = "EXTERNAL"
	ACTIVITY_RESUMED ActivityType = "ACTIVITY_RESUMED"
	ACTIVITY_PAUSED ActivityType = "ACTIVITY_PAUSED"
	ACTIVITY_STOPPED ActivityType = "ACTIVITY_STOPPED"
	FOREGROUND_SERVICE_START ActivityType = "FOREGROUND_SERVICE_START"
	FOREGROUND_SERVICE_STOP ActivityType = "FOREGROUND_SERVICE_STOP"
	GAME_INSTALLED ActivityType = "GAME_INSTALLED"
)

// All allowed values of ActivityType enum
var AllowedActivityTypeEnumValues = []ActivityType{
	"USER_SIGN_UP",
	"REFERRAL",
	"GAME_CLICK",
	"SOCIAL_CLICK",
	"EXTERNAL",
	"ACTIVITY_RESUMED",
	"ACTIVITY_PAUSED",
	"ACTIVITY_STOPPED",
	"FOREGROUND_SERVICE_START",
	"FOREGROUND_SERVICE_STOP",
	"GAME_INSTALLED",
}

func (v *ActivityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActivityType(value)
	for _, existing := range AllowedActivityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActivityType", value)
}

// NewActivityTypeFromValue returns a pointer to a valid ActivityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActivityTypeFromValue(v string) (*ActivityType, error) {
	ev := ActivityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActivityType: valid values are %v", v, AllowedActivityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActivityType) IsValid() bool {
	for _, existing := range AllowedActivityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActivityType value
func (v ActivityType) Ptr() *ActivityType {
	return &v
}

type NullableActivityType struct {
	value *ActivityType
	isSet bool
}

func (v NullableActivityType) Get() *ActivityType {
	return v.value
}

func (v *NullableActivityType) Set(val *ActivityType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityType(val *ActivityType) *NullableActivityType {
	return &NullableActivityType{value: val, isSet: true}
}

func (v NullableActivityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

