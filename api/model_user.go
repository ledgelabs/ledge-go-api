/*
@ledge/external-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgeapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User Model User
type User struct {
	LastLogin NullableTime `json:"lastLogin"`
	Verified bool `json:"verified"`
	MergedWith NullableString `json:"mergedWith"`
	GameId NullableString `json:"gameId"`
	ExternalId NullableString `json:"externalId"`
	ReferredById NullableString `json:"referredById"`
	EnableNotifications bool `json:"enableNotifications"`
	HasAcceptedLegal bool `json:"hasAcceptedLegal"`
	HasOnboarded bool `json:"hasOnboarded"`
	Gender Gender `json:"gender"`
	BirthYear float64 `json:"birthYear"`
	Avatar string `json:"avatar"`
	RemainingReferrals float64 `json:"remainingReferrals"`
	Code string `json:"code"`
	Usertag float64 `json:"usertag"`
	Username string `json:"username"`
	Name string `json:"name"`
	PhoneNumber NullableString `json:"phoneNumber"`
	Email NullableString `json:"email"`
	OriginalCreationDate NullableTime `json:"originalCreationDate"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
	Id string `json:"id"`
}

type _User User

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(lastLogin NullableTime, verified bool, mergedWith NullableString, gameId NullableString, externalId NullableString, referredById NullableString, enableNotifications bool, hasAcceptedLegal bool, hasOnboarded bool, gender Gender, birthYear float64, avatar string, remainingReferrals float64, code string, usertag float64, username string, name string, phoneNumber NullableString, email NullableString, originalCreationDate NullableTime, updatedAt time.Time, createdAt time.Time, id string) *User {
	this := User{}
	this.LastLogin = lastLogin
	this.Verified = verified
	this.MergedWith = mergedWith
	this.GameId = gameId
	this.ExternalId = externalId
	this.ReferredById = referredById
	this.EnableNotifications = enableNotifications
	this.HasAcceptedLegal = hasAcceptedLegal
	this.HasOnboarded = hasOnboarded
	this.Gender = gender
	this.BirthYear = birthYear
	this.Avatar = avatar
	this.RemainingReferrals = remainingReferrals
	this.Code = code
	this.Usertag = usertag
	this.Username = username
	this.Name = name
	this.PhoneNumber = phoneNumber
	this.Email = email
	this.OriginalCreationDate = originalCreationDate
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.Id = id
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetLastLogin returns the LastLogin field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *User) GetLastLogin() time.Time {
	if o == nil || o.LastLogin.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastLogin.Get()
}

// GetLastLoginOk returns a tuple with the LastLogin field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetLastLoginOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastLogin.Get(), o.LastLogin.IsSet()
}

// SetLastLogin sets field value
func (o *User) SetLastLogin(v time.Time) {
	o.LastLogin.Set(&v)
}

// GetVerified returns the Verified field value
func (o *User) GetVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value
// and a boolean to check if the value has been set.
func (o *User) GetVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verified, true
}

// SetVerified sets field value
func (o *User) SetVerified(v bool) {
	o.Verified = v
}

// GetMergedWith returns the MergedWith field value
// If the value is explicit nil, the zero value for string will be returned
func (o *User) GetMergedWith() string {
	if o == nil || o.MergedWith.Get() == nil {
		var ret string
		return ret
	}

	return *o.MergedWith.Get()
}

// GetMergedWithOk returns a tuple with the MergedWith field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetMergedWithOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MergedWith.Get(), o.MergedWith.IsSet()
}

// SetMergedWith sets field value
func (o *User) SetMergedWith(v string) {
	o.MergedWith.Set(&v)
}

// GetGameId returns the GameId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *User) GetGameId() string {
	if o == nil || o.GameId.Get() == nil {
		var ret string
		return ret
	}

	return *o.GameId.Get()
}

// GetGameIdOk returns a tuple with the GameId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetGameIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GameId.Get(), o.GameId.IsSet()
}

// SetGameId sets field value
func (o *User) SetGameId(v string) {
	o.GameId.Set(&v)
}

// GetExternalId returns the ExternalId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *User) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}

	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// SetExternalId sets field value
func (o *User) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}

// GetReferredById returns the ReferredById field value
// If the value is explicit nil, the zero value for string will be returned
func (o *User) GetReferredById() string {
	if o == nil || o.ReferredById.Get() == nil {
		var ret string
		return ret
	}

	return *o.ReferredById.Get()
}

// GetReferredByIdOk returns a tuple with the ReferredById field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetReferredByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferredById.Get(), o.ReferredById.IsSet()
}

// SetReferredById sets field value
func (o *User) SetReferredById(v string) {
	o.ReferredById.Set(&v)
}

// GetEnableNotifications returns the EnableNotifications field value
func (o *User) GetEnableNotifications() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableNotifications
}

// GetEnableNotificationsOk returns a tuple with the EnableNotifications field value
// and a boolean to check if the value has been set.
func (o *User) GetEnableNotificationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableNotifications, true
}

// SetEnableNotifications sets field value
func (o *User) SetEnableNotifications(v bool) {
	o.EnableNotifications = v
}

// GetHasAcceptedLegal returns the HasAcceptedLegal field value
func (o *User) GetHasAcceptedLegal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasAcceptedLegal
}

// GetHasAcceptedLegalOk returns a tuple with the HasAcceptedLegal field value
// and a boolean to check if the value has been set.
func (o *User) GetHasAcceptedLegalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasAcceptedLegal, true
}

// SetHasAcceptedLegal sets field value
func (o *User) SetHasAcceptedLegal(v bool) {
	o.HasAcceptedLegal = v
}

// GetHasOnboarded returns the HasOnboarded field value
func (o *User) GetHasOnboarded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasOnboarded
}

// GetHasOnboardedOk returns a tuple with the HasOnboarded field value
// and a boolean to check if the value has been set.
func (o *User) GetHasOnboardedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasOnboarded, true
}

// SetHasOnboarded sets field value
func (o *User) SetHasOnboarded(v bool) {
	o.HasOnboarded = v
}

// GetGender returns the Gender field value
func (o *User) GetGender() Gender {
	if o == nil {
		var ret Gender
		return ret
	}

	return o.Gender
}

// GetGenderOk returns a tuple with the Gender field value
// and a boolean to check if the value has been set.
func (o *User) GetGenderOk() (*Gender, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gender, true
}

// SetGender sets field value
func (o *User) SetGender(v Gender) {
	o.Gender = v
}

// GetBirthYear returns the BirthYear field value
func (o *User) GetBirthYear() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BirthYear
}

// GetBirthYearOk returns a tuple with the BirthYear field value
// and a boolean to check if the value has been set.
func (o *User) GetBirthYearOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BirthYear, true
}

// SetBirthYear sets field value
func (o *User) SetBirthYear(v float64) {
	o.BirthYear = v
}

// GetAvatar returns the Avatar field value
func (o *User) GetAvatar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value
// and a boolean to check if the value has been set.
func (o *User) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avatar, true
}

// SetAvatar sets field value
func (o *User) SetAvatar(v string) {
	o.Avatar = v
}

// GetRemainingReferrals returns the RemainingReferrals field value
func (o *User) GetRemainingReferrals() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.RemainingReferrals
}

// GetRemainingReferralsOk returns a tuple with the RemainingReferrals field value
// and a boolean to check if the value has been set.
func (o *User) GetRemainingReferralsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemainingReferrals, true
}

// SetRemainingReferrals sets field value
func (o *User) SetRemainingReferrals(v float64) {
	o.RemainingReferrals = v
}

// GetCode returns the Code field value
func (o *User) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *User) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *User) SetCode(v string) {
	o.Code = v
}

// GetUsertag returns the Usertag field value
func (o *User) GetUsertag() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Usertag
}

// GetUsertagOk returns a tuple with the Usertag field value
// and a boolean to check if the value has been set.
func (o *User) GetUsertagOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usertag, true
}

// SetUsertag sets field value
func (o *User) SetUsertag(v float64) {
	o.Usertag = v
}

// GetUsername returns the Username field value
func (o *User) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *User) SetUsername(v string) {
	o.Username = v
}

// GetName returns the Name field value
func (o *User) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *User) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *User) SetName(v string) {
	o.Name = v
}

// GetPhoneNumber returns the PhoneNumber field value
// If the value is explicit nil, the zero value for string will be returned
func (o *User) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber.Get() == nil {
		var ret string
		return ret
	}

	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// SetPhoneNumber sets field value
func (o *User) SetPhoneNumber(v string) {
	o.PhoneNumber.Set(&v)
}

// GetEmail returns the Email field value
// If the value is explicit nil, the zero value for string will be returned
func (o *User) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}

	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// SetEmail sets field value
func (o *User) SetEmail(v string) {
	o.Email.Set(&v)
}

// GetOriginalCreationDate returns the OriginalCreationDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *User) GetOriginalCreationDate() time.Time {
	if o == nil || o.OriginalCreationDate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.OriginalCreationDate.Get()
}

// GetOriginalCreationDateOk returns a tuple with the OriginalCreationDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetOriginalCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalCreationDate.Get(), o.OriginalCreationDate.IsSet()
}

// SetOriginalCreationDate sets field value
func (o *User) SetOriginalCreationDate(v time.Time) {
	o.OriginalCreationDate.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *User) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *User) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *User) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *User) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) {
	o.Id = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lastLogin"] = o.LastLogin.Get()
	toSerialize["verified"] = o.Verified
	toSerialize["mergedWith"] = o.MergedWith.Get()
	toSerialize["gameId"] = o.GameId.Get()
	toSerialize["externalId"] = o.ExternalId.Get()
	toSerialize["referredById"] = o.ReferredById.Get()
	toSerialize["enableNotifications"] = o.EnableNotifications
	toSerialize["hasAcceptedLegal"] = o.HasAcceptedLegal
	toSerialize["hasOnboarded"] = o.HasOnboarded
	toSerialize["gender"] = o.Gender
	toSerialize["birthYear"] = o.BirthYear
	toSerialize["avatar"] = o.Avatar
	toSerialize["remainingReferrals"] = o.RemainingReferrals
	toSerialize["code"] = o.Code
	toSerialize["usertag"] = o.Usertag
	toSerialize["username"] = o.Username
	toSerialize["name"] = o.Name
	toSerialize["phoneNumber"] = o.PhoneNumber.Get()
	toSerialize["email"] = o.Email.Get()
	toSerialize["originalCreationDate"] = o.OriginalCreationDate.Get()
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *User) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lastLogin",
		"verified",
		"mergedWith",
		"gameId",
		"externalId",
		"referredById",
		"enableNotifications",
		"hasAcceptedLegal",
		"hasOnboarded",
		"gender",
		"birthYear",
		"avatar",
		"remainingReferrals",
		"code",
		"usertag",
		"username",
		"name",
		"phoneNumber",
		"email",
		"originalCreationDate",
		"updatedAt",
		"createdAt",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUser := _User{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUser)

	if err != nil {
		return err
	}

	*o = User(varUser)

	return err
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


