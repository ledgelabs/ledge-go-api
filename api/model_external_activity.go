/*
@ledge/external-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExternalActivity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalActivity{}

// ExternalActivity struct for ExternalActivity
type ExternalActivity struct {
	Activity string `json:"activity"`
	UserId string `json:"userId"`
}

type _ExternalActivity ExternalActivity

// NewExternalActivity instantiates a new ExternalActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalActivity(activity string, userId string) *ExternalActivity {
	this := ExternalActivity{}
	this.Activity = activity
	this.UserId = userId
	return &this
}

// NewExternalActivityWithDefaults instantiates a new ExternalActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalActivityWithDefaults() *ExternalActivity {
	this := ExternalActivity{}
	return &this
}

// GetActivity returns the Activity field value
func (o *ExternalActivity) GetActivity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Activity
}

// GetActivityOk returns a tuple with the Activity field value
// and a boolean to check if the value has been set.
func (o *ExternalActivity) GetActivityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activity, true
}

// SetActivity sets field value
func (o *ExternalActivity) SetActivity(v string) {
	o.Activity = v
}

// GetUserId returns the UserId field value
func (o *ExternalActivity) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ExternalActivity) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ExternalActivity) SetUserId(v string) {
	o.UserId = v
}

func (o ExternalActivity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalActivity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activity"] = o.Activity
	toSerialize["userId"] = o.UserId
	return toSerialize, nil
}

func (o *ExternalActivity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activity",
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalActivity := _ExternalActivity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalActivity)

	if err != nil {
		return err
	}

	*o = ExternalActivity(varExternalActivity)

	return err
}

type NullableExternalActivity struct {
	value *ExternalActivity
	isSet bool
}

func (v NullableExternalActivity) Get() *ExternalActivity {
	return v.value
}

func (v *NullableExternalActivity) Set(val *ExternalActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalActivity(val *ExternalActivity) *NullableExternalActivity {
	return &NullableExternalActivity{value: val, isSet: true}
}

func (v NullableExternalActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


