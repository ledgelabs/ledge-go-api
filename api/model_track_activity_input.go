/*
@ledge/external-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrackActivityInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackActivityInput{}

// TrackActivityInput struct for TrackActivityInput
type TrackActivityInput struct {
	Occurrence string `json:"occurrence"`
	Count *float64 `json:"count,omitempty"`
	ActivityId string `json:"activityId"`
	UserId string `json:"userId"`
}

type _TrackActivityInput TrackActivityInput

// NewTrackActivityInput instantiates a new TrackActivityInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackActivityInput(occurrence string, activityId string, userId string) *TrackActivityInput {
	this := TrackActivityInput{}
	this.Occurrence = occurrence
	this.ActivityId = activityId
	this.UserId = userId
	return &this
}

// NewTrackActivityInputWithDefaults instantiates a new TrackActivityInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackActivityInputWithDefaults() *TrackActivityInput {
	this := TrackActivityInput{}
	return &this
}

// GetOccurrence returns the Occurrence field value
func (o *TrackActivityInput) GetOccurrence() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Occurrence
}

// GetOccurrenceOk returns a tuple with the Occurrence field value
// and a boolean to check if the value has been set.
func (o *TrackActivityInput) GetOccurrenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Occurrence, true
}

// SetOccurrence sets field value
func (o *TrackActivityInput) SetOccurrence(v string) {
	o.Occurrence = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *TrackActivityInput) GetCount() float64 {
	if o == nil || IsNil(o.Count) {
		var ret float64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackActivityInput) GetCountOk() (*float64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *TrackActivityInput) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given float64 and assigns it to the Count field.
func (o *TrackActivityInput) SetCount(v float64) {
	o.Count = &v
}

// GetActivityId returns the ActivityId field value
func (o *TrackActivityInput) GetActivityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value
// and a boolean to check if the value has been set.
func (o *TrackActivityInput) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivityId, true
}

// SetActivityId sets field value
func (o *TrackActivityInput) SetActivityId(v string) {
	o.ActivityId = v
}

// GetUserId returns the UserId field value
func (o *TrackActivityInput) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *TrackActivityInput) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *TrackActivityInput) SetUserId(v string) {
	o.UserId = v
}

func (o TrackActivityInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackActivityInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["occurrence"] = o.Occurrence
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	toSerialize["activityId"] = o.ActivityId
	toSerialize["userId"] = o.UserId
	return toSerialize, nil
}

func (o *TrackActivityInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"occurrence",
		"activityId",
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackActivityInput := _TrackActivityInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackActivityInput)

	if err != nil {
		return err
	}

	*o = TrackActivityInput(varTrackActivityInput)

	return err
}

type NullableTrackActivityInput struct {
	value *TrackActivityInput
	isSet bool
}

func (v NullableTrackActivityInput) Get() *TrackActivityInput {
	return v.value
}

func (v *NullableTrackActivityInput) Set(val *TrackActivityInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackActivityInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackActivityInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackActivityInput(val *TrackActivityInput) *NullableTrackActivityInput {
	return &NullableTrackActivityInput{value: val, isSet: true}
}

func (v NullableTrackActivityInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackActivityInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


