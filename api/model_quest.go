/*
@ledge/external-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgeapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Quest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quest{}

// Quest Model Quest
type Quest struct {
	Type QuestType `json:"type"`
	Description string `json:"description"`
	Title string `json:"title"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
	Id string `json:"id"`
}

type _Quest Quest

// NewQuest instantiates a new Quest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuest(type_ QuestType, description string, title string, updatedAt time.Time, createdAt time.Time, id string) *Quest {
	this := Quest{}
	this.Type = type_
	this.Description = description
	this.Title = title
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.Id = id
	return &this
}

// NewQuestWithDefaults instantiates a new Quest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestWithDefaults() *Quest {
	this := Quest{}
	return &this
}

// GetType returns the Type field value
func (o *Quest) GetType() QuestType {
	if o == nil {
		var ret QuestType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Quest) GetTypeOk() (*QuestType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Quest) SetType(v QuestType) {
	o.Type = v
}

// GetDescription returns the Description field value
func (o *Quest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Quest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Quest) SetDescription(v string) {
	o.Description = v
}

// GetTitle returns the Title field value
func (o *Quest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Quest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Quest) SetTitle(v string) {
	o.Title = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Quest) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Quest) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Quest) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Quest) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Quest) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Quest) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *Quest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Quest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Quest) SetId(v string) {
	o.Id = v
}

func (o Quest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["description"] = o.Description
	toSerialize["title"] = o.Title
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *Quest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"description",
		"title",
		"updatedAt",
		"createdAt",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuest := _Quest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuest)

	if err != nil {
		return err
	}

	*o = Quest(varQuest)

	return err
}

type NullableQuest struct {
	value *Quest
	isSet bool
}

func (v NullableQuest) Get() *Quest {
	return v.value
}

func (v *NullableQuest) Set(val *Quest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuest(val *Quest) *NullableQuest {
	return &NullableQuest{value: val, isSet: true}
}

func (v NullableQuest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


