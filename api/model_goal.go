/*
@ledge/external-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgeapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Goal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Goal{}

// Goal Model Goal
type Goal struct {
	QuestId string `json:"questId"`
	ObjectId NullableString `json:"objectId"`
	BannerUrl NullableString `json:"bannerUrl"`
	Instructions NullableString `json:"instructions"`
	Description NullableString `json:"description"`
	Activity ActivityType `json:"activity"`
	Target float64 `json:"target"`
	Title string `json:"title"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
	Id string `json:"id"`
}

type _Goal Goal

// NewGoal instantiates a new Goal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoal(questId string, objectId NullableString, bannerUrl NullableString, instructions NullableString, description NullableString, activity ActivityType, target float64, title string, updatedAt time.Time, createdAt time.Time, id string) *Goal {
	this := Goal{}
	this.QuestId = questId
	this.ObjectId = objectId
	this.BannerUrl = bannerUrl
	this.Instructions = instructions
	this.Description = description
	this.Activity = activity
	this.Target = target
	this.Title = title
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.Id = id
	return &this
}

// NewGoalWithDefaults instantiates a new Goal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoalWithDefaults() *Goal {
	this := Goal{}
	return &this
}

// GetQuestId returns the QuestId field value
func (o *Goal) GetQuestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuestId
}

// GetQuestIdOk returns a tuple with the QuestId field value
// and a boolean to check if the value has been set.
func (o *Goal) GetQuestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuestId, true
}

// SetQuestId sets field value
func (o *Goal) SetQuestId(v string) {
	o.QuestId = v
}

// GetObjectId returns the ObjectId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Goal) GetObjectId() string {
	if o == nil || o.ObjectId.Get() == nil {
		var ret string
		return ret
	}

	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// SetObjectId sets field value
func (o *Goal) SetObjectId(v string) {
	o.ObjectId.Set(&v)
}

// GetBannerUrl returns the BannerUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Goal) GetBannerUrl() string {
	if o == nil || o.BannerUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.BannerUrl.Get()
}

// GetBannerUrlOk returns a tuple with the BannerUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetBannerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BannerUrl.Get(), o.BannerUrl.IsSet()
}

// SetBannerUrl sets field value
func (o *Goal) SetBannerUrl(v string) {
	o.BannerUrl.Set(&v)
}

// GetInstructions returns the Instructions field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Goal) GetInstructions() string {
	if o == nil || o.Instructions.Get() == nil {
		var ret string
		return ret
	}

	return *o.Instructions.Get()
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetInstructionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instructions.Get(), o.Instructions.IsSet()
}

// SetInstructions sets field value
func (o *Goal) SetInstructions(v string) {
	o.Instructions.Set(&v)
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Goal) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Goal) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetActivity returns the Activity field value
func (o *Goal) GetActivity() ActivityType {
	if o == nil {
		var ret ActivityType
		return ret
	}

	return o.Activity
}

// GetActivityOk returns a tuple with the Activity field value
// and a boolean to check if the value has been set.
func (o *Goal) GetActivityOk() (*ActivityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activity, true
}

// SetActivity sets field value
func (o *Goal) SetActivity(v ActivityType) {
	o.Activity = v
}

// GetTarget returns the Target field value
func (o *Goal) GetTarget() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *Goal) GetTargetOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *Goal) SetTarget(v float64) {
	o.Target = v
}

// GetTitle returns the Title field value
func (o *Goal) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Goal) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Goal) SetTitle(v string) {
	o.Title = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Goal) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Goal) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Goal) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Goal) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Goal) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Goal) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *Goal) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Goal) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Goal) SetId(v string) {
	o.Id = v
}

func (o Goal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Goal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["questId"] = o.QuestId
	toSerialize["objectId"] = o.ObjectId.Get()
	toSerialize["bannerUrl"] = o.BannerUrl.Get()
	toSerialize["instructions"] = o.Instructions.Get()
	toSerialize["description"] = o.Description.Get()
	toSerialize["activity"] = o.Activity
	toSerialize["target"] = o.Target
	toSerialize["title"] = o.Title
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *Goal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"questId",
		"objectId",
		"bannerUrl",
		"instructions",
		"description",
		"activity",
		"target",
		"title",
		"updatedAt",
		"createdAt",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGoal := _Goal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGoal)

	if err != nil {
		return err
	}

	*o = Goal(varGoal)

	return err
}

type NullableGoal struct {
	value *Goal
	isSet bool
}

func (v NullableGoal) Get() *Goal {
	return v.value
}

func (v *NullableGoal) Set(val *Goal) {
	v.value = val
	v.isSet = true
}

func (v NullableGoal) IsSet() bool {
	return v.isSet
}

func (v *NullableGoal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoal(val *Goal) *NullableGoal {
	return &NullableGoal{value: val, isSet: true}
}

func (v NullableGoal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


