/*
@ledge/external-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgeapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterUser200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterUser200Response{}

// RegisterUser200Response struct for RegisterUser200Response
type RegisterUser200Response struct {
	LinkingCode string `json:"linkingCode"`
	LedgeLink string `json:"ledgeLink"`
}

type _RegisterUser200Response RegisterUser200Response

// NewRegisterUser200Response instantiates a new RegisterUser200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterUser200Response(linkingCode string, ledgeLink string) *RegisterUser200Response {
	this := RegisterUser200Response{}
	this.LinkingCode = linkingCode
	this.LedgeLink = ledgeLink
	return &this
}

// NewRegisterUser200ResponseWithDefaults instantiates a new RegisterUser200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterUser200ResponseWithDefaults() *RegisterUser200Response {
	this := RegisterUser200Response{}
	return &this
}

// GetLinkingCode returns the LinkingCode field value
func (o *RegisterUser200Response) GetLinkingCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkingCode
}

// GetLinkingCodeOk returns a tuple with the LinkingCode field value
// and a boolean to check if the value has been set.
func (o *RegisterUser200Response) GetLinkingCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkingCode, true
}

// SetLinkingCode sets field value
func (o *RegisterUser200Response) SetLinkingCode(v string) {
	o.LinkingCode = v
}

// GetLedgeLink returns the LedgeLink field value
func (o *RegisterUser200Response) GetLedgeLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LedgeLink
}

// GetLedgeLinkOk returns a tuple with the LedgeLink field value
// and a boolean to check if the value has been set.
func (o *RegisterUser200Response) GetLedgeLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LedgeLink, true
}

// SetLedgeLink sets field value
func (o *RegisterUser200Response) SetLedgeLink(v string) {
	o.LedgeLink = v
}

func (o RegisterUser200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterUser200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["linkingCode"] = o.LinkingCode
	toSerialize["ledgeLink"] = o.LedgeLink
	return toSerialize, nil
}

func (o *RegisterUser200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"linkingCode",
		"ledgeLink",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterUser200Response := _RegisterUser200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterUser200Response)

	if err != nil {
		return err
	}

	*o = RegisterUser200Response(varRegisterUser200Response)

	return err
}

type NullableRegisterUser200Response struct {
	value *RegisterUser200Response
	isSet bool
}

func (v NullableRegisterUser200Response) Get() *RegisterUser200Response {
	return v.value
}

func (v *NullableRegisterUser200Response) Set(val *RegisterUser200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterUser200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterUser200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterUser200Response(val *RegisterUser200Response) *NullableRegisterUser200Response {
	return &NullableRegisterUser200Response{value: val, isSet: true}
}

func (v NullableRegisterUser200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterUser200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


