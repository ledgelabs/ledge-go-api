/*
@ledge/external-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ledgeapi

import (
	"encoding/json"
	"fmt"
)

// QuestType the model 'QuestType'
type QuestType string

// List of QuestType
const (
	INDIVIDUAL QuestType = "INDIVIDUAL"
	COMMUNITY QuestType = "COMMUNITY"
)

// All allowed values of QuestType enum
var AllowedQuestTypeEnumValues = []QuestType{
	"INDIVIDUAL",
	"COMMUNITY",
}

func (v *QuestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QuestType(value)
	for _, existing := range AllowedQuestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QuestType", value)
}

// NewQuestTypeFromValue returns a pointer to a valid QuestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQuestTypeFromValue(v string) (*QuestType, error) {
	ev := QuestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QuestType: valid values are %v", v, AllowedQuestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QuestType) IsValid() bool {
	for _, existing := range AllowedQuestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QuestType value
func (v QuestType) Ptr() *QuestType {
	return &v
}

type NullableQuestType struct {
	value *QuestType
	isSet bool
}

func (v NullableQuestType) Get() *QuestType {
	return v.value
}

func (v *NullableQuestType) Set(val *QuestType) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestType) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestType(val *QuestType) *NullableQuestType {
	return &NullableQuestType{value: val, isSet: true}
}

func (v NullableQuestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

